// =================================================================
//
// File: example06.cpp
// Author: Pedro Perez
// Description: This file contains the code to perform the numerical
//		integration of a function within a defined interval 
//		using C/C++ threads. To compile:
//		g++ -o app -pthread example06.cpp
//
// Copyright (c) 2024 by Tecnologico de Monterrey.
// All Rights Reserved. May be reproduced for any non-commercial
// purpose.
//
// =================================================================

#include <iostream>
#include <iomanip>
#include <algorithm>
#include <chrono>
#include <cmath>
#include <cstring>
#include <thread>
#include "utils.h"

using namespace std;
using namespace std::chrono;

#define PI	 	3.14159265
#define RECTS 	1000000000 //1e9
#define THREADS std::thread::hardware_concurrency()

double non_overloaded_sin(double x) {
    return sin(x);
}

// =================================================================
// Returns the the numerical integration of a function within a 
// defined interval within the [start, end] segment. The obtained 
// value is assigned to the variable by reference 'result'
//
// @param start, the lower limit.
// @param end, the upper limit.
// @param x, the lower limit of the interval.
// @param dx, the increase in x.
// @param fn, the functio to be integrate.
// @param result, to this variable is assigned the result of the 
//                operation.
// =================================================================
void integration(int start, int end, 
                 double x, double dx, double (*fn) (double),
                 double &result) {
    double acum = 0;
    for (int i = start; i < end; i++) {
        acum += fn(x + (i * dx));
    }
    result = acum;
}

int main(int argc, char* argv[]) {
    double result, x, dx, acum;

    // These variables are used to keep track of the execution time.
    high_resolution_clock::time_point start, end;
    double timeElapsed;

    // We calculate the block size that is assigned to each thread 
    // by dividing the task size by the number of threads.
    int blockSize = ceil((double) RECTS / THREADS);
    thread threads[THREADS];

    // We use the 'results' array to store the results generated by 
    // each thread.
    double results[THREADS];

    // We initialize each location in the array to zero.
    memset(results, 0, sizeof(double) * THREADS);

    x = 0;
    dx = PI / RECTS;

    // We execute the task at least 10 times (N). It is necessary 
    // to do so, since it allows us to reduce the impact of the 
    // load on the operating system at the time of execution.
    cout << "Starting...\n";
    timeElapsed = 0;
    for (int j = 0; j < N; j++) {
        // We take a clock record before execution.
        start = high_resolution_clock::now();

        // We generate the threads and assign them the tasks they 
        // must perform. Each task is delimited within the range 
        // [start, end). 
        // FORK STEP
        for (int i = 0; i < THREADS; i++) {
            int start = (i * blockSize);
            int end = (i != (THREADS - 1))? ((i + 1) * blockSize) : RECTS;
            threads[i] = thread(integration, start, end,
                                x, dx, non_overloaded_sin, 
                                std::ref(results[i]));
        }

        // We wait for all the threads to finish their assigned 
        // task. After a particular thread has finished, we retrieve 
        // its partial result and use it to calculate the overall 
        // result.
        // JOIN STEP
        acum = 0;
        for (int i = 0; i < THREADS; i++) {
            threads[i].join();
            acum += results[i];
        }

        // We take a clock record after execution. We calculate the 
        // difference between the two records. This difference is 
        // the time it took to execute the task.
        end = high_resolution_clock::now();
        timeElapsed += 
            duration<double, std::milli>(end - start).count();
    }
    // We display the result and the average execution time.
    result = acum * dx;
    cout << "result = " << fixed << setprecision(20)  << result << "\n";
    cout << "avg time = " << fixed << setprecision(3) 
         << (timeElapsed / N) <<  " ms\n";

    return 0;
}
